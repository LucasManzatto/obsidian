{
	"nodes":[
		{"type":"group","id":"c04141d0342577a3","x":6060,"y":-2780,"width":13740,"height":4700,"label":"DAGs"},
		{"type":"group","id":"4dd563b850fc149a","x":1280,"y":-1760,"width":2720,"height":2000,"label":"Architecture"},
		{"type":"group","id":"af9566391fe0587d","x":5880,"y":-5080,"width":3107,"height":1680,"label":"DAG Runs"},
		{"type":"group","id":"c139948399167217","x":9540,"y":-6160,"width":1138,"height":800,"label":"Tasks"},
		{"type":"group","id":"cf62dc6eaef9f61d","x":9804,"y":-7660,"width":700,"height":520,"label":"Sensors"},
		{"type":"group","id":"974eaf5f55078503","x":9988,"y":-6860,"width":331,"height":380,"label":"Operators"},
		{"type":"text","text":" ```py\nimport datetime\n\nimport pendulum\n\nfrom airflow import DAG\nfrom airflow.operators.empty import EmptyOperator\nfrom airflow.operators.latest_only import LatestOnlyOperator\nfrom airflow.utils.trigger_rule import TriggerRule\n\nwith DAG(\n    dag_id=\"latest_only_with_trigger\",\n    schedule=datetime.timedelta(hours=4),\n    start_date=pendulum.datetime(2021, 1, 1, tz=\"UTC\"),\n    catchup=False,\n    tags=[\"example3\"],\n) as dag:\n    latest_only = LatestOnlyOperator(task_id=\"latest_only\")\n    task1 = EmptyOperator(task_id=\"task1\")\n    task2 = EmptyOperator(task_id=\"task2\")\n    task3 = EmptyOperator(task_id=\"task3\")\n    task4 = EmptyOperator(task_id=\"task4\", trigger_rule=TriggerRule.ALL_DONE)\n\n    latest_only >> task1 >> [task3, task4]\n    task2 >> [task3, task4]\n```\n","id":"9660c8dce970e84b","x":14488,"y":820,"width":784,"height":580},
		{"type":"text","text":"Control Flow","id":"d7e8bec4e6082abb","x":15393,"y":-280,"width":250,"height":60},
		{"type":"text","text":"Latest Only","id":"bf80026196419cb9","x":14725,"y":21,"width":250,"height":60},
		{"type":"text","text":"This special Operator skips all tasks downstream of itself if you are not on the “latest” DAG run (if the wall-clock time right now is between its execution_time and the next scheduled execution_time, and it was not an externally-triggered run).","id":"bd0de35bf388269f","x":14608,"y":323,"width":484,"height":132},
		{"type":"text","text":"Loading","id":"b3fc34f24afc6ff8","x":8564,"y":-1040,"width":250,"height":60},
		{"type":"text","text":"DAGs","id":"3b424805b677fdf8","x":8564,"y":-2160,"width":250,"height":60},
		{"type":"text","text":"Python Files","id":"634bcb5c7c5b122a","x":8564,"y":-1820,"width":250,"height":60},
		{"type":"text","text":"DAG_FOLDER","id":"7cd9c5d3a29ff639","x":8564,"y":-1460,"width":250,"height":60},
		{"type":"text","text":"choose_branch","id":"304969a6371734b9","x":13359,"y":1580,"width":250,"height":60,"color":"3"},
		{"type":"text","text":"- `task1` is directly downstream of `latest_only` and will be skipped for all runs except the latest.","id":"6769eec10325e197","x":13940,"y":1580,"width":383,"height":91},
		{"type":"text","text":"- `task2` is entirely independent of `latest_only` and will run in all scheduled periods","id":"82b09832d7b2f06e","x":14400,"y":1580,"width":348,"height":108},
		{"type":"text","text":"All upstream tasks are done with their execution","id":"5c5178227ccdf5a9","x":16661,"y":988,"width":250,"height":60},
		{"type":"text","text":"- `task4` is downstream of `task1` and `task2`, but it will not be skipped, since its `trigger_rule` is set to `all_done`.","id":"692875d5c5a7f6fe","x":15480,"y":1573,"width":426,"height":123},
		{"type":"text","text":"All upstream tasks have succeeded","id":"a5aa960eafd754b7","x":16020,"y":988,"width":250,"height":60},
		{"type":"text","text":"DAG","id":"5237de42d6969042","x":8564,"y":-640,"width":250,"height":60},
		{"type":"text","text":"All directory and subfolder","id":"11e2265e300a5d7e","x":12299,"y":-2048,"width":250,"height":60},
		{"type":"text","text":"At least one upstream task succeeded or failed","id":"7bbdc2a94e1295c3","x":17996,"y":1006,"width":250,"height":60},
		{"type":"text","text":"All upstream tasks have not `failed` or `upstream_failed` - that is, all upstream tasks have succeeded or been skipped","id":"64708611eda5c892","x":18316,"y":1008,"width":254,"height":152},
		{"type":"text","text":" ```py\nclass MyBranchOperator(BaseBranchOperator):\n    def choose_branch(self, context):\n        \"\"\"\n        Run an extra branch on the first day of the month\n        \"\"\"\n        if context['data_interval_start'].day == 1:\n            return ['daily_task_id', 'monthly_task_id']\n        elif context['data_interval_start'].day == 2:\n            return 'daily_task_id'\n        else:\n            return None\n```\n","id":"6b681d25c25a8989","x":13155,"y":780,"width":658,"height":300,"color":"3"},
		{"type":"text","text":" BranchPythonOperator","id":"41c74162e1ea7dcd","x":13340,"y":317,"width":250,"height":60,"color":"3"},
		{"type":"text","text":"**airflow** and **dag**","id":"3e6e5926a410383e","x":11324,"y":-2425,"width":250,"height":60},
		{"type":"text","text":"Any files","id":"b426f960e84f5917","x":11324,"y":-2238,"width":250,"height":50},
		{"type":"text","text":".airflowignore file","id":"06c4f4cb6487a520","x":11324,"y":-2048,"width":250,"height":60},
		{"type":"text","text":" ```py\ndef might_contain_dag(file_path: str, zip_file: zipfile.ZipFile | None = None) -> bool:\n    # Your logic to check if there are DAGs defined in the file_path\n    # Return True if the file_path needs to be parsed, otherwise False\n```\n","id":"5e312af4eb7b18ca","x":11324,"y":-1878,"width":755,"height":130},
		{"type":"text","text":"Non-linear operations","id":"21d53220cac184f6","x":10150,"y":635,"width":250,"height":60,"color":"3"},
		{"type":"text","text":"Linear operations","id":"b987902861975527","x":11510,"y":647,"width":250,"height":60,"color":"3"},
		{"type":"text","text":"Branching","id":"ae96255725cf8e98","x":12905,"y":9,"width":250,"height":60,"color":"3"},
		{"type":"text","text":" ```py\nfrom airflow.models.baseoperator import cross_downstream\n\n# Replaces\n# [op1, op2] >> op3\n# [op1, op2] >> op4\ncross_downstream([op1, op2], [op3, op4])\n```\n","id":"ebdae0dc2cb75b30","x":9964,"y":243,"width":620,"height":177,"color":"3"},
		{"type":"text","text":" ```py\nfrom airflow.models.baseoperator import chain\n\n# Replaces op1 >> op2 >> op3 >> op4\nchain(op1, op2, op3, op4)\n\n# You can also do it dynamically\nchain(*[EmptyOperator(task_id='op' + i) for i in range(1, 6)])\n```\n","id":"0b14ba34ae2995f5","x":10764,"y":243,"width":620,"height":177,"color":"3"},
		{"type":"text","text":" ```py\nfirst_task.set_downstream(second_task, third_task)\nthird_task.set_upstream(fourth_task)\n```\n","id":"1160a3e3f704e902","x":9244,"y":243,"width":560,"height":80,"color":"3"},
		{"type":"text","text":"Tasks Dependencies","id":"45239be84064326c","x":9524,"y":-240,"width":250,"height":60,"color":"3"},
		{"type":"text","text":"all_skipped","id":"094e93a0b2f85f77","x":16980,"y":790,"width":250,"height":60},
		{"type":"text","text":"none","id":"51bbe4fae1f749a8","x":18445,"y":245,"width":250,"height":60},
		{"type":"text","text":"always","id":"9649d34e65833feb","x":19340,"y":245,"width":250,"height":60},
		{"type":"text","text":"All upstream tasks have not `failed` or `upstream_failed`, and at least one upstream task has succeeded.","id":"8ade08e2b385a409","x":18665,"y":1016,"width":250,"height":164},
		{"type":"text","text":"none_failed","id":"28b978fc85e244b4","x":18320,"y":790,"width":250,"height":60},
		{"type":"text","text":"none_failed_min_one_success","id":"77bba31c80020372","x":18640,"y":790,"width":304,"height":57},
		{"type":"text","text":"none_skipped","id":"eccced63afe66a6c","x":19000,"y":787,"width":250,"height":60},
		{"type":"text","text":"All upstream tasks are in a `failed` or `upstream_failed` state","id":"656cc646f5ccd5cd","x":16313,"y":987,"width":304,"height":61},
		{"type":"text","text":"Parallel","id":"b699eb6f0905d234","x":6736,"y":-4637,"width":250,"height":60},
		{"type":"text","text":"API","id":"8688005a9701f900","x":7666,"y":-4637,"width":250,"height":60},
		{"type":"text","text":"DAG Run","id":"ff07cbaef7523c7e","x":6736,"y":-4393,"width":250,"height":60},
		{"type":"text","text":"Running","id":"aa4793bb8768dfe7","x":7541,"y":-4100,"width":250,"height":60},
		{"type":"text","text":"Triggered","id":"05fdba6c7b159dda","x":7472,"y":-4393,"width":250,"height":60},
		{"type":"text","text":"As an example of why this is useful, consider writing a DAG that processes a daily set of experimental data. It’s been rewritten, and you want to run it on the previous 3 months of data—no problem, since Airflow can _backfill_ the DAG and run copies of it for every day in those previous 3 months, all at once.\n\nThose DAG Runs will all have been started on the same actual day, but each DAG run will have one data interval covering a single day in that 3 month period, and that data interval is all the tasks, operators and sensors inside the DAG look at when they run.","id":"7885128e23ce5f7b","x":6531,"y":-4960,"width":660,"height":246},
		{"type":"text","text":"Logical Date","id":"a41f099f6d9db934","x":5976,"y":-4637,"width":250,"height":60},
		{"type":"text","text":"DAG","id":"01dcce71cf5fdf3c","x":8230,"y":-4637,"width":250,"height":60},
		{"type":"text","text":"Schedule","id":"0cffa179ba801f61","x":8230,"y":-4393,"width":250,"height":60},
		{"type":"text","text":" ```py\nwith DAG(\"my_daily_dag\", schedule=\"@daily\"):\n    ...\n```\n","id":"31828cfa7d011829","x":7934,"y":-4873,"width":421,"height":107},
		{"type":"text","text":"Manual","id":"5dd4daddd1bf90cb","x":7325,"y":-4637,"width":250,"height":60},
		{"type":"text","text":" ```py\nwith DAG(\"my_daily_dag\", schedule=\"0 * * * *\"):\n    ...\n```\n","id":"3d5cab7410a8009f","x":8480,"y":-4873,"width":421,"height":107},
		{"type":"text","text":"Task Instances","id":"a3425be074ad4f6f","x":9640,"y":-5800,"width":250,"height":60},
		{"type":"text","text":"Specific occurrences of tasks in the context of a DAG run","id":"527f4e4a6371b11f","x":9640,"y":-5560,"width":250,"height":100},
		{"type":"text","text":"Tasks","id":"3a1e5c5d3f14f0e2","x":9945,"y":-6060,"width":250,"height":60},
		{"type":"text","text":"Operators","id":"bd5e19e071b01a4b","x":10019,"y":-6840,"width":250,"height":60},
		{"type":"text","text":"Jinja Templating","id":"c1ebbec4f5202074","x":10008,"y":-6619,"width":250,"height":60},
		{"type":"text","text":"Timeouts","id":"6d9390085c27c470","x":9945,"y":-5806,"width":250,"height":60},
		{"type":"text","text":"SLAs","id":"27700376ea02944d","x":10240,"y":-5806,"width":250,"height":60},
		{"type":"text","text":"poke","id":"f2c2873dc63877f6","x":9839,"y":-7380,"width":250,"height":60},
		{"type":"text","text":"reschedule","id":"5d98be4629775687","x":10214,"y":-7380,"width":250,"height":60},
		{"type":"text","text":"Sensors","id":"bd48c30ba4fab5b5","x":10004,"y":-7620,"width":250,"height":60},
		{"type":"text","text":"All upstream tasks are in a `skipped` state","id":"632d2f6b50dce370","x":16980,"y":988,"width":250,"height":60},
		{"type":"text","text":"At least one upstream task has succeeded (does not wait for all upstream tasks to be done)","id":"f0c6888ec866cc2e","x":17363,"y":982,"width":257,"height":138},
		{"type":"text","text":"At least one upstream task has failed (does not wait for all upstream tasks to be done)","id":"27f72d541501bfa8","x":17673,"y":987,"width":257,"height":133},
		{"type":"text","text":"one_success","id":"d63f38dda8d99914","x":17370,"y":790,"width":250,"height":60},
		{"type":"text","text":" ```py\nimport datetime\n\nfrom airflow.decorators import dag\nfrom airflow.operators.empty import EmptyOperator\n\n@dag(start_date=datetime.datetime(2021, 1, 1), schedule=\"@daily\")\ndef generate_dag():\n    EmptyOperator(task_id=\"task\")\n\ngenerate_dag()\n```\n","id":"9b56d97f1d09d1bf","x":7824,"y":243,"width":640,"height":257,"color":"5"},
		{"type":"text","text":"Can return the ID of a downstream task, or a list of task IDs, which will be run, and all others will be skipped. It can also return None to skip all downstream task","id":"0875686dab78574f","x":12439,"y":1580,"width":471,"height":116,"color":"3"},
		{"type":"text","text":" ```py\nfirst_task >> [second_task, third_task]\nthird_task << fourth_task\n```\n","id":"4cc176bd5beabf57","x":8564,"y":243,"width":560,"height":80,"color":"3"},
		{"type":"text","text":" ```py\n@task.branch(task_id=\"branch_task\")\ndef branch_func(ti):\n    xcom_value = int(ti.xcom_pull(task_ids=\"start_task\"))\n    if xcom_value >= 5:\n        return \"continue_task\"\n    elif xcom_value >= 3:\n        return \"stop_task\"\n    else:\n        return None\n\nstart_op = BashOperator(\n    task_id=\"start_task\",\n    bash_command=\"echo 5\",\n    xcom_push=True,\n    dag=dag,\n)\n\nbranch_op = branch_func()\n\ncontinue_op = EmptyOperator(task_id=\"continue_task\", dag=dag)\nstop_op = EmptyOperator(task_id=\"stop_task\", dag=dag)\n\nstart_op >> branch_op >> [continue_op, stop_op]\n```\n","id":"e7534e5e1a3e859a","x":12341,"y":780,"width":666,"height":540,"color":"3"},
		{"type":"text","text":" ```py\nfrom airflow.models.baseoperator import chain\n\n# Replaces\n# op1 >> op2 >> op4 >> op6\n# op1 >> op3 >> op5 >> op6\nchain(op1, [op2, op3], [op4, op5], op6)\n```\n","id":"b19a85d42009b1cc","x":10764,"y":640,"width":620,"height":180,"color":"3"},
		{"type":"text","text":"No upstream task is in a `skipped` state - that is, all upstream tasks are in a `success`, `failed`, or `upstream_failed` state","id":"f974115d39172309","x":19000,"y":1016,"width":300,"height":199},
		{"type":"text","text":"Trigger Rules","id":"bc6c0beeb733b8bb","x":17930,"y":21,"width":250,"height":60},
		{"type":"text","text":"- `task3` is downstream of `task1` and `task2` and because of the default [trigger rule](https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/dags.html#concepts-trigger-rules) being `all_success` will receive a cascaded skip from `task1`.","id":"afad62507d71aebd","x":14880,"y":1580,"width":513,"height":122},
		{"type":"text","text":"one","id":"36d41a7cfa52db83","x":17680,"y":248,"width":250,"height":60},
		{"type":"text","text":"one_failed","id":"00c7992e270915a3","x":17680,"y":790,"width":250,"height":60},
		{"type":"text","text":"Often, many Operators inside a DAG need the same set of default arguments (such as their `retries`). Rather than having to specify this individually for every Operator, you can instead pass `default_args` to the DAG when you create it, and it will auto-apply them to any operator tied to it:","id":"7d6772fa182cd9a9","x":7524,"y":-1040,"width":470,"height":180,"color":"4"},
		{"type":"text","text":" ```py\nimport pendulum\n\nwith DAG(\n    dag_id=\"my_dag\",\n    start_date=pendulum.datetime(2016, 1, 1),\n    schedule=\"@daily\",\n    default_args={\"retries\": 2},\n):\n    op = BashOperator(task_id=\"hello_world\", bash_command=\"Hello World!\")\n    print(op.retries)  # 2\n```\n","id":"027c15297086ea29","x":7449,"y":-1430,"width":735,"height":250,"color":"4"},
		{"type":"text","text":"Declaration","id":"509fdb693d9e3266","x":7304,"y":-320,"width":250,"height":60,"color":"5"},
		{"type":"text","text":" ```py\nimport datetime\n\nfrom airflow import DAG\nfrom airflow.operators.empty import EmptyOperator\n\nmy_dag = DAG(dag_id=\"my_dag_name\",     start_date=datetime.datetime(2021, 1, 1),schedule=\"@daily\") \n\nEmptyOperator(task_id=\"task\", dag=my_dag)\n```\n","id":"091f8425a616bfbe","x":7059,"y":243,"width":620,"height":236,"color":"5"},
		{"type":"text","text":" ```py\nimport datetime\n\nfrom airflow import DAG\nfrom airflow.operators.empty import EmptyOperator\n\nwith DAG(dag_id=\"my_dag_name\",start_date=datetime.datetime(2021, 1, 1),schedule=\"@daily\"):\n\tEmptyOperator(task_id=\"task\")\n```\n","id":"d4cb90b5f70faf41","x":6314,"y":243,"width":620,"height":236,"color":"5"},
		{"type":"text","text":" ```py\ndag_1 = DAG('this_dag_will_be_discovered')\n\ndef my_function():\n    dag_2 = DAG('but_this_dag_will_not')\n\nmy_function()\n```\n","id":"512442389c6c41b9","x":9004,"y":-2277,"width":620,"height":177},
		{"type":"text","text":"No dependencies at all, run this task at any time","id":"a16df84301251227","x":19360,"y":790,"width":250,"height":60},
		{"type":"text","text":"one_done","id":"e82b16b983591c85","x":18000,"y":790,"width":250,"height":60},
		{"type":"text","text":"@task.branch","id":"862dcf1fe45215ab","x":12549,"y":323,"width":250,"height":54,"color":"3"},
		{"type":"text","text":"User Interface","id":"176323f77f912f6f","x":3585,"y":-1070,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"Webserver","id":"53b8286cd01d9d19","x":3585,"y":-650,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"Metadata Database","id":"09dba2e58956dc70","x":3585,"y":-210,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"Only dag_1 at global()","id":"278700a7e16210b4","x":9189,"y":-2580,"width":250,"height":60},
		{"type":"text","text":"File name filters","id":"604916043e2f1561","x":10524,"y":-2190,"width":250,"height":60},
		{"type":"text","text":"Architecture","id":"dce3977a99bbca1d","x":3330,"y":-1420,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"DAG Directory","id":"f6c800675aba4dde","x":2000,"y":-210,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"Workers","id":"421abec38b3478d9","x":2665,"y":-210,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"Scheduler","id":"07f3a8d588d347fb","x":3080,"y":-1070,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"all_done","id":"79d19b01ff4b391a","x":16640,"y":790,"width":250,"height":60},
		{"type":"text","text":"all_failed","id":"1e167ef51787e11c","x":16340,"y":790,"width":250,"height":60},
		{"type":"text","text":"Depends on Past","id":"60b0310acca8b531","x":15663,"y":20,"width":250,"height":60},
		{"type":"text","text":"You can also say a task can only run if the _previous_ run of the task in the previous DAG Run succeeded.","id":"c49a1d9605afe19e","x":15625,"y":248,"width":325,"height":146},
		{"type":"text","text":"all_success","id":"4f80984f4b58166e","x":16020,"y":790,"width":250,"height":60},
		{"type":"text","text":"all","id":"573fe397c689553c","x":16536,"y":248,"width":250,"height":60},
		{"type":"text","text":"Tasks","id":"5ad3771f08b8a7ba","x":3085,"y":50,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"Executor","id":"98eb0ae8d4c96744","x":3080,"y":-650,"width":250,"height":60,"color":"5"},
		{"type":"file","file":"attachments/Pasted image 20230602095850.png","id":"87fdd050d52f6955","x":1310,"y":-1720,"width":1480,"height":963},
		{"type":"text","text":"`depends_on_past` argument on your Task to `True`","id":"2b24a4adc9eedb1c","x":15620,"y":790,"width":313,"height":77}
	],
	"edges":[
		{"id":"2b31a630077aca15","fromNode":"53b8286cd01d9d19","fromSide":"bottom","toNode":"09dba2e58956dc70","toSide":"top","label":"Used by"},
		{"id":"5febcd3f2c369605","fromNode":"07f3a8d588d347fb","fromSide":"bottom","toNode":"09dba2e58956dc70","toSide":"top","label":"Used by"},
		{"id":"49bb2753f1867eaa","fromNode":"98eb0ae8d4c96744","fromSide":"bottom","toNode":"09dba2e58956dc70","toSide":"top","label":"Used By"},
		{"id":"dbbeb23fe9ca7017","fromNode":"dce3977a99bbca1d","fromSide":"bottom","toNode":"176323f77f912f6f","toSide":"top"},
		{"id":"784df3d5545a575b","fromNode":"dce3977a99bbca1d","fromSide":"bottom","toNode":"07f3a8d588d347fb","toSide":"top"},
		{"id":"d48b215a10bd6d48","fromNode":"98eb0ae8d4c96744","fromSide":"bottom","toNode":"f6c800675aba4dde","toSide":"top","label":"Read by"},
		{"id":"66d40afaae09f9a5","fromNode":"07f3a8d588d347fb","fromSide":"bottom","toNode":"f6c800675aba4dde","toSide":"top","label":"Read by"},
		{"id":"4a26ee4cef870d86","fromNode":"421abec38b3478d9","fromSide":"bottom","toNode":"5ad3771f08b8a7ba","toSide":"top","label":"Handle"},
		{"id":"01a2454b59235100","fromNode":"98eb0ae8d4c96744","fromSide":"bottom","toNode":"421abec38b3478d9","toSide":"top","label":"Can have"},
		{"id":"a16e425610e9688a","fromNode":"98eb0ae8d4c96744","fromSide":"bottom","toNode":"5ad3771f08b8a7ba","toSide":"top","label":"Handle as default"},
		{"id":"28bac79fad423d64","fromNode":"07f3a8d588d347fb","fromSide":"bottom","toNode":"98eb0ae8d4c96744","toSide":"top","label":"Submit tasks to"},
		{"id":"e751df968cb80322","fromNode":"176323f77f912f6f","fromSide":"bottom","toNode":"53b8286cd01d9d19","toSide":"top"},
		{"id":"70ba1dc17e53920b","fromNode":"509fdb693d9e3266","fromSide":"bottom","toNode":"d4cb90b5f70faf41","toSide":"top","label":"Context Manager"},
		{"id":"763c41f1bde0cc50","fromNode":"5237de42d6969042","fromSide":"bottom","toNode":"509fdb693d9e3266","toSide":"top"},
		{"id":"b6d4e9100a45dbcb","fromNode":"509fdb693d9e3266","fromSide":"bottom","toNode":"091f8425a616bfbe","toSide":"top","label":"Standard constructor"},
		{"id":"031d889360d2a034","fromNode":"509fdb693d9e3266","fromSide":"bottom","toNode":"9b56d97f1d09d1bf","toSide":"top","label":"Decorator"},
		{"id":"48eee1f0e4442b86","fromNode":"5237de42d6969042","fromSide":"bottom","toNode":"45239be84064326c","toSide":"top"},
		{"id":"2edde02c9f4dd96d","fromNode":"45239be84064326c","fromSide":"bottom","toNode":"4cc176bd5beabf57","toSide":"top","label":"Recommended\nBitshift composition"},
		{"id":"45b8acb03a371403","fromNode":"45239be84064326c","fromSide":"bottom","toNode":"1160a3e3f704e902","toSide":"top","label":"set_downstream\nset_upstream"},
		{"id":"e323f3bce9bfa3ba","fromNode":"45239be84064326c","fromSide":"bottom","toNode":"ebdae0dc2cb75b30","toSide":"top","label":"cross_downstream"},
		{"id":"4ff3fb575c07c1a2","fromNode":"45239be84064326c","fromSide":"bottom","toNode":"0b14ba34ae2995f5","toSide":"top","label":"chain"},
		{"id":"13ca7fce972c6093","fromNode":"0b14ba34ae2995f5","fromSide":"bottom","toNode":"b19a85d42009b1cc","toSide":"top","label":"pairwise dependency"},
		{"id":"4da77f054a018126","fromNode":"7cd9c5d3a29ff639","fromSide":"top","toNode":"634bcb5c7c5b122a","toSide":"bottom","label":"Has"},
		{"id":"86fe118f6d9c6eeb","fromNode":"634bcb5c7c5b122a","fromSide":"top","toNode":"3b424805b677fdf8","toSide":"bottom","label":"Can have multiple"},
		{"id":"d2ab85b9a5f5d65d","fromNode":"3b424805b677fdf8","fromSide":"left","toNode":"634bcb5c7c5b122a","toSide":"left","label":"Can be spread across"},
		{"id":"bdd81ef8ae71c32a","fromNode":"634bcb5c7c5b122a","fromSide":"top","toNode":"512442389c6c41b9","toSide":"bottom","label":"Load DAGs only at the Top Level"},
		{"id":"82e950925a911ef7","fromNode":"512442389c6c41b9","fromSide":"top","toNode":"278700a7e16210b4","toSide":"bottom"},
		{"id":"0b828fc2ddc1542b","fromNode":"5237de42d6969042","fromSide":"top","toNode":"b3fc34f24afc6ff8","toSide":"bottom"},
		{"id":"669cde9f33725a19","fromNode":"b3fc34f24afc6ff8","fromSide":"top","toNode":"7cd9c5d3a29ff639","toSide":"bottom","label":"Look for Python files in"},
		{"id":"5b1db1e591141a06","fromNode":"634bcb5c7c5b122a","fromSide":"top","toNode":"604916043e2f1561","toSide":"left"},
		{"id":"4674bc94eeedeed0","fromNode":"604916043e2f1561","fromSide":"right","toNode":"3e6e5926a410383e","toSide":"left","label":"Default"},
		{"id":"8ae67108db0d602c","fromNode":"604916043e2f1561","fromSide":"right","toNode":"06c4f4cb6487a520","toSide":"left","label":"Inside DAG_FOLDER or subfolders"},
		{"id":"4ef2a953e66b0713","fromNode":"06c4f4cb6487a520","fromSide":"right","toNode":"11e2265e300a5d7e","toSide":"left","label":"Covers"},
		{"id":"d827693b28c684c0","fromNode":"604916043e2f1561","fromSide":"right","toNode":"b426f960e84f5917","toSide":"left","label":"disable DAG_DISCOVERY_SAFE_MODE"},
		{"id":"a2567f733d64b1b6","fromNode":"604916043e2f1561","fromSide":"right","toNode":"5e312af4eb7b18ca","toSide":"left","label":"Modify config file"},
		{"id":"cb7aa460abb97daa","fromNode":"5237de42d6969042","fromSide":"top","toNode":"d7e8bec4e6082abb","toSide":"top"},
		{"id":"39e633aa612dec57","fromNode":"d7e8bec4e6082abb","fromSide":"bottom","toNode":"ae96255725cf8e98","toSide":"top"},
		{"id":"2975080636ca1663","fromNode":"d7e8bec4e6082abb","fromSide":"bottom","toNode":"bf80026196419cb9","toSide":"top"},
		{"id":"3da3080c619e0630","fromNode":"d7e8bec4e6082abb","fromSide":"bottom","toNode":"60b0310acca8b531","toSide":"top"},
		{"id":"a44cf7b786e41ca1","fromNode":"d7e8bec4e6082abb","fromSide":"bottom","toNode":"bc6c0beeb733b8bb","toSide":"top"},
		{"id":"33eae35c9f1e8b8c","fromNode":"c04141d0342577a3","fromSide":"top","toNode":"af9566391fe0587d","toSide":"bottom","label":"Create"},
		{"id":"3240925fa03577d9","fromNode":"3a1e5c5d3f14f0e2","fromSide":"bottom","toNode":"a3425be074ad4f6f","toSide":"top"},
		{"id":"c7c59d38cdeafa0d","fromNode":"af9566391fe0587d","fromSide":"top","toNode":"c139948399167217","toSide":"bottom","label":"Execute"},
		{"id":"56c77b8a1b544413","fromNode":"c04141d0342577a3","fromSide":"top","toNode":"c139948399167217","toSide":"bottom","label":"Defines"},
		{"id":"57aaf0bb1afcd3b3","fromNode":"01dcce71cf5fdf3c","fromSide":"top","toNode":"31828cfa7d011829","toSide":"bottom"},
		{"id":"fdc9728e05b7ec7d","fromNode":"01dcce71cf5fdf3c","fromSide":"top","toNode":"3d5cab7410a8009f","toSide":"bottom","label":"Any Valid crontab"},
		{"id":"75e9a52e1089b5ca","fromNode":"0cffa179ba801f61","fromSide":"top","toNode":"01dcce71cf5fdf3c","toSide":"bottom","label":"Defined on"},
		{"id":"eb885fcec0c31082","fromNode":"aa4793bb8768dfe7","fromSide":"top","toNode":"0cffa179ba801f61","toSide":"bottom"},
		{"id":"79413c195889dabd","fromNode":"aa4793bb8768dfe7","fromSide":"top","toNode":"05fdba6c7b159dda","toSide":"bottom"},
		{"id":"b57820586792f9ae","fromNode":"aa4793bb8768dfe7","fromSide":"top","toNode":"ff07cbaef7523c7e","toSide":"bottom","label":"Create a new instance of DAG"},
		{"id":"f0e6eb20347eceb7","fromNode":"05fdba6c7b159dda","fromSide":"top","toNode":"5dd4daddd1bf90cb","toSide":"bottom","label":"Via"},
		{"id":"060e2d9b048e06fb","fromNode":"05fdba6c7b159dda","fromSide":"top","toNode":"8688005a9701f900","toSide":"bottom","label":"Via"},
		{"id":"23a8dd058789fa9b","fromNode":"ff07cbaef7523c7e","fromSide":"top","toNode":"b699eb6f0905d234","toSide":"bottom","label":"Can run same DAG"},
		{"id":"a837389090d7d0b0","fromNode":"ff07cbaef7523c7e","fromSide":"top","toNode":"a41f099f6d9db934","toSide":"bottom","label":"Has a"},
		{"id":"87e8b736b44fae47","fromNode":"b699eb6f0905d234","fromSide":"top","toNode":"7885128e23ce5f7b","toSide":"bottom"},
		{"id":"15e48a511eca398a","fromNode":"bd5e19e071b01a4b","fromSide":"bottom","toNode":"c1ebbec4f5202074","toSide":"top"},
		{"id":"4f13eb6a13de1327","fromNode":"974eaf5f55078503","fromSide":"bottom","toNode":"c139948399167217","toSide":"top","label":"Predefined"},
		{"id":"8be9962b57f4e6a0","fromNode":"3a1e5c5d3f14f0e2","fromSide":"bottom","toNode":"6d9390085c27c470","toSide":"top"},
		{"id":"51bf6dca4da66cee","fromNode":"3a1e5c5d3f14f0e2","fromSide":"bottom","toNode":"27700376ea02944d","toSide":"top"},
		{"id":"08ec0d2bed569584","fromNode":"bd48c30ba4fab5b5","fromSide":"bottom","toNode":"f2c2873dc63877f6","toSide":"top"},
		{"id":"f768b12075dda537","fromNode":"cf62dc6eaef9f61d","fromSide":"bottom","toNode":"974eaf5f55078503","toSide":"top","label":"Special type of"},
		{"id":"d4ff0d97de920bcd","fromNode":"bd48c30ba4fab5b5","fromSide":"bottom","toNode":"5d98be4629775687","toSide":"top"},
		{"id":"1a01cd64186f1de1","fromNode":"421abec38b3478d9","fromSide":"left","toNode":"f6c800675aba4dde","toSide":"right","label":"Read by"},
		{"id":"c2e98b86dc44ac9a","fromNode":"5237de42d6969042","fromSide":"top","toNode":"7d6772fa182cd9a9","toSide":"bottom","label":"Default Arguments"},
		{"id":"fac55f50cd8a3460","fromNode":"7d6772fa182cd9a9","fromSide":"top","toNode":"027c15297086ea29","toSide":"bottom"},
		{"id":"c5d4e0b75b4e54c0","fromNode":"ebdae0dc2cb75b30","fromSide":"bottom","toNode":"21d53220cac184f6","toSide":"top","label":"Best for"},
		{"id":"559aee0242808326","fromNode":"0b14ba34ae2995f5","fromSide":"bottom","toNode":"b987902861975527","toSide":"top","label":"Best for"},
		{"id":"65bd0ed2f451f1c7","fromNode":"ae96255725cf8e98","fromSide":"bottom","toNode":"862dcf1fe45215ab","toSide":"top"},
		{"id":"2d0970fec54c7593","fromNode":"ae96255725cf8e98","fromSide":"bottom","toNode":"41c74162e1ea7dcd","toSide":"top"},
		{"id":"9b3693e02c7f3e2b","fromNode":"862dcf1fe45215ab","fromSide":"right","toNode":"41c74162e1ea7dcd","toSide":"left","label":"Recommended over"},
		{"id":"f400035fd65df70e","fromNode":"862dcf1fe45215ab","fromSide":"bottom","toNode":"e7534e5e1a3e859a","toSide":"top"},
		{"id":"e589133e9c70b6df","fromNode":"41c74162e1ea7dcd","fromSide":"bottom","toNode":"6b681d25c25a8989","toSide":"top"},
		{"id":"1cb375501d0ff463","fromNode":"e7534e5e1a3e859a","fromSide":"bottom","toNode":"0875686dab78574f","toSide":"top"},
		{"id":"ad445162c173de43","fromNode":"bf80026196419cb9","fromSide":"bottom","toNode":"bd0de35bf388269f","toSide":"top"},
		{"id":"f7fdfd68c57b264c","fromNode":"bd0de35bf388269f","fromSide":"bottom","toNode":"9660c8dce970e84b","toSide":"top"},
		{"id":"5d812cc07b57a603","fromNode":"9660c8dce970e84b","fromSide":"bottom","toNode":"6769eec10325e197","toSide":"top"},
		{"id":"c884ebad70f45d71","fromNode":"9660c8dce970e84b","fromSide":"bottom","toNode":"82b09832d7b2f06e","toSide":"top"},
		{"id":"ae70bd359f7ccc99","fromNode":"9660c8dce970e84b","fromSide":"bottom","toNode":"afad62507d71aebd","toSide":"top"},
		{"id":"39a69ae5a3a408ed","fromNode":"9660c8dce970e84b","fromSide":"bottom","toNode":"692875d5c5a7f6fe","toSide":"top"},
		{"id":"c6f6d94103bca391","fromNode":"6b681d25c25a8989","fromSide":"bottom","toNode":"304969a6371734b9","toSide":"top","label":"Needs to implement"},
		{"id":"87305071c18c9f1e","fromNode":"bc6c0beeb733b8bb","fromSide":"left","toNode":"60b0310acca8b531","toSide":"right","label":"Can be combined"},
		{"id":"1d91b16d97f2c49e","fromNode":"bc6c0beeb733b8bb","fromSide":"bottom","toNode":"573fe397c689553c","toSide":"top"},
		{"id":"d8f4c06c14cd2647","fromNode":"bc6c0beeb733b8bb","fromSide":"bottom","toNode":"36d41a7cfa52db83","toSide":"top"},
		{"id":"2d3b6e4c471574dc","fromNode":"bc6c0beeb733b8bb","fromSide":"bottom","toNode":"51bbe4fae1f749a8","toSide":"top"},
		{"id":"b7705d585d67b876","fromNode":"bc6c0beeb733b8bb","fromSide":"bottom","toNode":"9649d34e65833feb","toSide":"top"},
		{"id":"6741fd1fd4dbe03d","fromNode":"573fe397c689553c","fromSide":"bottom","toNode":"4f80984f4b58166e","toSide":"top","label":"Default"},
		{"id":"fb537c228a913f1b","fromNode":"573fe397c689553c","fromSide":"bottom","toNode":"1e167ef51787e11c","toSide":"top"},
		{"id":"4e3e7c6d23a677ab","fromNode":"573fe397c689553c","fromSide":"bottom","toNode":"79d19b01ff4b391a","toSide":"top"},
		{"id":"8124d7cee0f43909","fromNode":"573fe397c689553c","fromSide":"bottom","toNode":"094e93a0b2f85f77","toSide":"top"},
		{"id":"e5f89590cb677bef","fromNode":"36d41a7cfa52db83","fromSide":"bottom","toNode":"d63f38dda8d99914","toSide":"top"},
		{"id":"00fb5abc855f9396","fromNode":"36d41a7cfa52db83","fromSide":"bottom","toNode":"00c7992e270915a3","toSide":"top"},
		{"id":"6f9eadfcc3f9889b","fromNode":"36d41a7cfa52db83","fromSide":"bottom","toNode":"e82b16b983591c85","toSide":"top"},
		{"id":"0aea3f9dfe667853","fromNode":"51bbe4fae1f749a8","fromSide":"bottom","toNode":"28b978fc85e244b4","toSide":"top"},
		{"id":"8df48a228e5d399e","fromNode":"51bbe4fae1f749a8","fromSide":"bottom","toNode":"77bba31c80020372","toSide":"top"},
		{"id":"02b5c34aee58863b","fromNode":"51bbe4fae1f749a8","fromSide":"bottom","toNode":"eccced63afe66a6c","toSide":"top"},
		{"id":"06d4197126a569d4","fromNode":"4f80984f4b58166e","fromSide":"bottom","toNode":"a5aa960eafd754b7","toSide":"top"},
		{"id":"60cba0d541d9aa03","fromNode":"1e167ef51787e11c","fromSide":"bottom","toNode":"656cc646f5ccd5cd","toSide":"top"},
		{"id":"11d69c3774fb71d4","fromNode":"79d19b01ff4b391a","fromSide":"bottom","toNode":"5c5178227ccdf5a9","toSide":"top"},
		{"id":"88076526b996c264","fromNode":"094e93a0b2f85f77","fromSide":"bottom","toNode":"632d2f6b50dce370","toSide":"top"},
		{"id":"3faa020300c97fae","fromNode":"d63f38dda8d99914","fromSide":"bottom","toNode":"f0c6888ec866cc2e","toSide":"top"},
		{"id":"ca6b7bf85814ec11","fromNode":"00c7992e270915a3","fromSide":"bottom","toNode":"27f72d541501bfa8","toSide":"top"},
		{"id":"9892ba414825c466","fromNode":"e82b16b983591c85","fromSide":"bottom","toNode":"7bbdc2a94e1295c3","toSide":"top"},
		{"id":"5c76a7082bb8665c","fromNode":"28b978fc85e244b4","fromSide":"bottom","toNode":"64708611eda5c892","toSide":"top"},
		{"id":"a9ee8f480896ef88","fromNode":"77bba31c80020372","fromSide":"bottom","toNode":"8ade08e2b385a409","toSide":"top"},
		{"id":"40096cd9cfa5e7af","fromNode":"eccced63afe66a6c","fromSide":"bottom","toNode":"f974115d39172309","toSide":"top"},
		{"id":"0d688922b4c9508c","fromNode":"9649d34e65833feb","fromSide":"bottom","toNode":"a16df84301251227","toSide":"top"},
		{"id":"57b93c721f4ef885","fromNode":"60b0310acca8b531","fromSide":"bottom","toNode":"c49a1d9605afe19e","toSide":"top"},
		{"id":"04c5b8fc7d3dba2f","fromNode":"c49a1d9605afe19e","fromSide":"bottom","toNode":"2b24a4adc9eedb1c","toSide":"top","label":"Set"},
		{"id":"d4c6458fc75a8d07","fromNode":"a3425be074ad4f6f","fromSide":"bottom","toNode":"527f4e4a6371b11f","toSide":"top","label":"Represents"}
	]
}